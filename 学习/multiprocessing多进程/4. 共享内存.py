import multiprocessing as mp  # 导入Python的多进程模块
# 共享内存相当于全局变量
# 使用multiprocessing.Value创建一个共享值对象，该对象用于在多个进程间共享一个基本数据类型的值。
# 'i'表示数据类型为有符号整数（signed integer），1是初始值。
value = mp.Value('i', 1)  # 'i'代表整数类型

# 使用multiprocessing.Array创建一个共享数组对象，该对象用于在多个进程间共享一个基本数据类型的数组。
# 'i'同样表示数据类型为有符号整数，后面的[1, 2, 3]是初始化数组的元素列表。
array = mp.Array('i', [1, 2, 3])  # 'i'代表整数类型

# 下面是multiprocessing共享对象支持的数据类型对照表：
# 'b' : 布尔型 (Boolean) - 仅支持单个布尔值。
# 'c' : Unicode字符 (Character) - 仅支持单个字符。
# 'd' : 双精度浮点数 (Double) - 支持双精度浮点数。
# 'f' : 单精度浮点数 (Float) - 支持单精度浮点数。
# 'h' : 短整型 (Short) - 支持短整型整数。
# 'H' : 无符号短整型 (Unsigned short) - 支持无符号的短整型整数。
# 'i' : 整型 (Integer) - 支持整型整数。
# 'I' : 无符号整型 (Unsigned Integer) - 支持无符号的整型整数。
# 'l' : 长整型 (Long) - 支持长整型整数。
# 'L' : 无符号长整型 (Unsigned Long) - 支持无符号的长整型整数。
# 'q' : 长长整型 (Long Long) - 支持长长型整数。
# 'Q' : 无符号长长整型 (Unsigned Long Long) - 支持无符号的长长型整数。

# 这些共享对象允许多个进程安全地访问和修改它们，而不需要担心竞态条件和数据竞争问题。
# 它们是多进程编程中用于进程间通信的重要工具。

# 注意：在实际使用这些共享对象之前，你需要创建一个进程池，然后在进程池中启动多个进程，
# 这些进程可以对这些共享对象进行操作。同时，确保在所有进程都完成对共享对象的操作后，
# 正确地关闭进程池以释放资源。